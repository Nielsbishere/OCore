#include <lighting.ogsl>

//Output data

Image2D(0, outputTexture, rgba16f);

//Input data

Texture2D(1, gUvs);
Texture2Du(2, gMaterials);
Texture2D(3, gDepth);
Texture2D(4, gNormals);

//Uniform & view data

Uniform(5, global, Global, { Vec3 ambient; f32 time; Vec2u resolution; f32 power; ViewHandle view; });
Uniform(6, views, Views_noalloc, { ViewBuffer data; });

//Textures & materials

Sampler(7, linear);
Sampler(8, nearest);
TextureList(9, textures, 2);
ConstArray(10, materials, Materials, MaterialStruct);

//Lights

ConstArray(11, directionalLights, DirectionalLights, Light);
ConstArray(12, pointLights, PointLights, Light);
ConstArray(13, spotLights, SpotLights, Light);

//Sample from handle
Vec4 sample2D(sampler s, TextureHandle handle, Vec2 uv){
	return sample2D(s, textures[handle], uv);
}

//Spheremap transform
Vec3 unpackNormal(Vec2 enc) {
    Vec2 fenc = enc * 4 - 2;
    f32 f = dot(fenc, fenc);
    f32 g = sqrt(1 - f / 4);
    return Vec3(fenc * g, 1 - f / 2);
}

Compute(16, 16, 1) {

	Vec2u coords = invocationId.xy;

	if(coords.x >= global.resolution.x || coords.y >= global.resolution.y)		//TODO: Avoid this branching
		return;

	Vec2 globalUv = Vec2(coords) / Vec2(global.resolution - 1);

	View view = views.data.views[global.view];
	Camera cam = views.data.cameras[view.camera];

	Vec2 uv = sample2D(nearest, gUvs, globalUv).xy;
	Vec3 normal = unpackNormal(sample2D(nearest, gNormals, globalUv).xy);
	u32 material = max(1, sample2Du(nearest, gMaterials, globalUv).x) - 1;
	f32 depth = sample2D(nearest, gDepth, globalUv).x;

	Vec3 pos = reconstructPosition(globalUv, depth, view.vpInv);

    //Get camera position
	Vec3 cpos = normalize(cam.position - pos);

    //Calculate lighting result
	LightResult lr = { Vec3(0, 0, 0), 0, Vec3(0, 0, 0), 0 };
	
	for(int i = 0; i < directionalLights.length(); i++){
		LightResult res = calculateDirectional(directionalLights[i], pos, normal, cpos, global.power);
		lr.diffuse += res.diffuse;
		lr.specular += res.specular;
	}
	
	for(int j = 0; j < pointLights.length(); j++){
		LightResult res = calculatePoint(pointLights[j], pos, normal, cpos, global.power);
		lr.diffuse += res.diffuse;
		lr.specular += res.specular;
	}
	
	for(int k = 0; k < spotLights.length(); k++){
		LightResult res = calculateSpot(spotLights[k], pos, normal, cpos, global.power);
		lr.diffuse += res.diffuse;
		lr.specular += res.specular;
	}
	
    //Get material
	MaterialStruct m = materials[material];
    
    //Get diffuse texture
	Vec3 dif = sample2D(linear, m.t_diffuse, uv).rgb;
    
    //Write lighting result to render target
	write2D(outputTexture, coords, Vec4(calculateLighting(lr, dif, global.ambient, m), 1));

}