#define TextureHandle u32
#define MaterialHandle u32
#define NodeHandle u32
#define LightHandle u32

//Handle to a camera (0 - 127) (MAX_CAMERAS)
#define CameraHandle u32

//Handle to a camera frustum (0 - 127) (MAX_CAMERA_FRUSTA)
#define CameraFrustumHandle u32

//Handle to a view (0 - 255) (MAX_VIEWS)
#define ViewHandle u32

//Material flags
const u32 MaterialFlag_Diffuse = 1 << 0;
const u32 MaterialFlag_Opacity = 1 << 1;
const u32 MaterialFlag_Emissive = 1 << 2;
const u32 MaterialFlag_Roughness = 1 << 3;
const u32 MaterialFlag_AO = 1 << 4;
const u32 MaterialFlag_Height = 1 << 5;
const u32 MaterialFlag_Metallic = 1 << 6;
const u32 MaterialFlag_Normal = 1 << 7;

//Material
//96 bytes; ~11k material (structs) per MiB
struct MaterialStruct {

	Vec3 diffuse;
	f32 opacity;

	Vec3 reflective;
	f32 roughness;

	Vec3 emissive;
	f32 metallic;

	MaterialHandle id;
	u32 textureFlags;					//& MaterialFlag
	TextureHandle t_diffuse;			//sRGB8 (3 Bpp) or HDR RGB16f (6 Bpp)
	TextureHandle t_opacity;			//R8 (1 Bpp)

	TextureHandle t_emissive;			//RGB16 (6 Bpp)
	TextureHandle t_roughness;			//R8 (1 Bpp)
	TextureHandle t_ao;					//R8 (1 Bpp)
	TextureHandle t_height;				//R8 (1 Bpp)

	Vec2u padding;
	TextureHandle t_metallic;			//R8 (1 Bpp)
	TextureHandle t_normal;				//RGB8s (3 Bpp)
	
};

//Lighting

//Point, spot or directional light; 48 bytes
struct Light {

	Vec3 pos;
	f32 intensity;

	Vec3 col;
	f32 radius;

	Vec3 dir;
	f32 angle;

};

//Result of lighting
struct LightResult {

	Vec3 diffuse;
	f32 p0;

	Vec3 specular;
	f32 p1;

};

inline Vec3 calculateDiffuse(Light li, Vec3 dir, Vec3 normal){
	return li.col * max(0, dot(normal, dir)) * li.intensity;
}

inline Vec3 calculateSpecular(Light li, Vec3 dir, Vec3 normal, Vec3 cdir, f32 power){
	return li.col * pow(max(0, dot(normalize(reflect(-dir, normal)), cdir)), power) * li.intensity;
}

inline LightResult calculateDirectional(Light dli, Vec3 pos, Vec3 normal, Vec3 cdir, f32 power){

	LightResult res;
	res.diffuse = calculateDiffuse(dli, -dli.dir, normal);
	res.specular = calculateSpecular(dli, -dli.dir, normal, cdir, power);

	return res;

}

inline f32 attenuation(f32 r, f32 d, f32 smoothness) {
	return 1.0f - smoothstep(r * smoothness, r, d);
}

inline f32 attenuation(f32 r, f32 d) {
	return attenuation(r, d, 0); 
}

inline LightResult calculatePoint(Light pli, Vec3 pos, Vec3 normal, Vec3 cdir, f32 power){

	Vec3 dir = pli.pos - pos;
	const f32 dist = length(dir);
	dir = dir / dist;

	const f32 a = attenuation(pli.radius, dist);

	LightResult res;
	res.diffuse = calculateDiffuse(pli, dir, normal) * a;
	res.specular = calculateSpecular(pli, dir, normal, cdir, power) * a;

	return res;

}

inline f32 calculateSpotIntensity(Light sli, Vec3 dir){

	const f32 minCos = cos(radians(sli.angle));
	const f32 maxCos = lerp(minCos, 1, 0.5f);
	const f32 cosAngle = dot(sli.dir, -dir);
	return smoothstep(minCos, maxCos, cosAngle);

}

inline LightResult calculateSpot(Light sli, Vec3 pos, Vec3 normal, Vec3 cdir, f32 power){

	Vec3 dir = sli.pos - pos;
	const f32 dist = length(dir);
	dir = dir / dist;

	const f32 a = attenuation(sli.radius, dist) * calculateSpotIntensity(sli, dir);

	LightResult res;
	res.diffuse = calculateDiffuse(sli, dir, normal) * a;
	res.specular = calculateSpecular(sli, dir, normal, cdir, power) * a;

	return res;

}

inline Vec3 calculateLighting(LightResult res, Vec3 col, Vec3 ambient, MaterialStruct mat){
	return (res.diffuse * mat.diffuse + res.specular + ambient) * col;
}

inline Vec3 reconstructPosition(Vec2 uv, f32 depth, Matrix vpInv) {
	const Vec4 clipPos = Vec4(uv.x * 2 - 1, (1 - uv.y) * 2 - 1, depth, 1);
	Vec4 worldPos = vpInv * clipPos;
	worldPos /= worldPos.w;
	return worldPos.xyz;
}

//Camera (positional / orientation data)
//length: 6x16 = 96 bytes
struct Camera {

	Matrix v;			//View matrix

	Vec3 position;		//Camera 'eye'
	f32 p0;

	Vec3 rotation;		//Rotation of the camera (degrees; pitch, yaw, roll)
	f32 p1;

};

//CameraFrustum (projection data)
//length: 6x16 = 96
struct CameraFrustum {

	Matrix p;			//Projection matrix

	f32 near;			//Near clipping plane (depth = 0)
	f32 far;			//Far clipping plane (depth = 1)
	f32 aspect;			//Aspect ratio (resolution.x / resolution.y)
	f32 fov;			//FOV in degrees

	Vec2u resolution;	//Resolution (w, h) in pixels
	u32 p0;
	u32 p1;

};

//View (projection and orientation data)
//It only includes handles to cameras and viewports
//cameras[camera] is the view's camera
//frusta[cameraFrustum] is the view's frustum
//views[view] is the view
//144 bytes per view (camera and camera frustum data is re-used)
struct View {

	CameraHandle camera;
	CameraFrustumHandle cameraFrustum;
	u32 p0, p1;

	Matrix vp;

	Matrix vpInv;

};

#define MAX_CAMERAS 128
#define MAX_CAMERA_FRUSTA 128
#define MAX_VIEWS 256

//ViewData (contains all cameras, frusta and viewports)
//128 * 96 + 128 * 96 + 256 * 144 = 256 * (96 + 144) = 60 KiB < 64 KiB (UBO speed limit)
struct ViewBuffer {

	Camera cameras[MAX_CAMERAS];
	CameraFrustum frusta[MAX_CAMERA_FRUSTA];
	View views[MAX_VIEWS];

};

//General definition of a Node

const u32 NodeType_object = 0;
const u32 NodeType_light = 1;
const u32 NodeType_view = 2;

const u32 NodeObjectType_empty = NodeType_object;
const u32 NodeObjectType_mesh = 4 | NodeType_object;
const u32 NodeObjectType_skeleton = 8 | NodeType_object;
const u32 NodeObjectType_bone = 12 | NodeType_object;

const u32 NodeLightType_point = NodeType_light;
const u32 NodeLightType_directional = 4 | NodeType_light;
const u32 NodeLightType_spot = 8 | NodeType_light;
const u32 NodeLightType_sun = 12 | NodeType_light;

const u32 NodeTypeBits = 5;
const u32 NodeTypeMask = (1 << 5) - 1;

//16 bytes per node
struct Mesh {
	u32 baseVertex, baseIndex;
	u32 vertices, indices;
};

//96 bytes per node
struct Node {

	Quat lRotation;			//Local rotation
	
	Vec3 lPosition;			//Local position
	u32 typeId;				//typeId & 0x3 = type, typeId >> 2 = id
	
	Vec3 lScale;			//Local scale
	u32 parent;				//Parent's id
	
	Quat gRotation;			//Global rotation
	
	Vec3 gScale;			//Global scale
	u32 localId;			//Local id

	Vec3 gPosition;			//Global position
	u32 globalId;			//Global id

};

inline Quat multiplyQuat(const Quat a, const Quat b) {

	return Quat(
		a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y,
		a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z,
		a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x,
		a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z
	);

}

inline Quat normalizeQuat(const Quat x) {
	return normalize(x);
}

inline Quat inverseRotQuat(const Quat x){
	return Quat(-x.xyz, x.w);
}

inline Quat inverseQuat(const Quat x){
	f32 ilen = 1.0f / length(x);
	return inverseRotQuat(x) * ilen;
}

inline Node parentNode(const Node node, const Node parent) {

	const Quat igrot = inverseRotQuat(node.gRotation);
	const Quat qpos = Quat(node.lPosition * node.lScale, 0);

	Node result = node;
	result.gPosition = parent.gPosition + multiplyQuat(multiplyQuat(parent.gRotation, qpos), igrot).xyz;
	result.gRotation = multiplyQuat(parent.gRotation, node.lRotation);
	result.gScale = parent.gScale * node.lScale;
	return result;
}

inline Vec3 transformVert(const Node node, const Vec3 pos) {
	const Quat qpos = Quat(pos * node.gScale, 0);
	const Quat igrot = inverseRotQuat(node.gRotation);
	return node.gPosition + multiplyQuat(multiplyQuat(node.gRotation, qpos), igrot).xyz;
}

inline Vec3 transformDir(const Node node, const Vec3 dir) {
	const Quat qdir = Quat(dir, 0);
	const Quat igrot = inverseRotQuat(node.gRotation);
	return multiplyQuat(multiplyQuat(node.gRotation, qdir), igrot).xyz;
}

inline Quat transformQuat(const Node node, const Quat dir) {
	return multiplyQuat(node.gRotation, dir);
}